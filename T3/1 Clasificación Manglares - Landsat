/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var manglar = 
    /* color: #06d630 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.65532291663592, 19.14053372248058],
                  [-69.65472210181659, 19.13104641991294],
                  [-69.6484564615578, 19.126910758485437],
                  [-69.64133251441424, 19.129424604242583],
                  [-69.64476574195331, 19.13712808684002],
                  [-69.64914310706561, 19.141831089006928]]]),
            {
              "clase": 1,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.64720836882151, 19.156366014445457],
                  [-69.65098491911448, 19.14833910241414],
                  [-69.64068523649729, 19.144609293236364],
                  [-69.6387969613508, 19.150528298972795],
                  [-69.63836780790842, 19.1565281702595],
                  [-69.64257351164377, 19.159528024061974]]]),
            {
              "clase": 1,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.63766310029597, 19.183640072157772],
                  [-69.64384290986628, 19.171479943748587],
                  [-69.63577482514948, 19.169128882059734],
                  [-69.6295091848907, 19.177235849741972],
                  [-69.62916586213679, 19.183559007607343]]]),
            {
              "clase": 1,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.62856504731745, 19.19020616820931],
                  [-69.63045332246394, 19.18590986336831],
                  [-69.62702009492487, 19.18461284365038],
                  [-69.62556097322077, 19.18980086122136]]]),
            {
              "clase": 1,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.6419546347198, 19.19506977422452],
                  [-69.64796278291315, 19.18923342976184],
                  [-69.64495870881647, 19.183964329960453],
                  [-69.63586065583796, 19.187125810075315],
                  [-69.6353456717071, 19.19280010930146]]]),
            {
              "clase": 1,
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.6404955130157, 19.216143739059987],
                  [-69.646675322586, 19.210956552100747],
                  [-69.64461538606257, 19.20495866318737],
                  [-69.6353456717071, 19.20252702428915],
                  [-69.63294241242976, 19.21355016603805],
                  [-69.63225576692194, 19.21889936555947]]]),
            {
              "clase": 1,
              "system:index": "5"
            })]),
    noManglar = 
    /* color: #ff2c01 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.70490448064243, 19.14582172396355],
                  [-69.70713607854282, 19.13795647307694],
                  [-69.69374649114047, 19.13722668853301],
                  [-69.68954078740512, 19.145497391129638],
                  [-69.69546310491, 19.152308246776574],
                  [-69.70155708379184, 19.152713645985305]]]),
            {
              "clase": 2,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.67889778203403, 19.147605543156388],
                  [-69.6800994116727, 19.13787538606468],
                  [-69.67246048039829, 19.136659076102127],
                  [-69.6694564063016, 19.14574064081483],
                  [-69.67211715764438, 19.150686639979668]]]),
            {
              "clase": 2,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.6661048965067, 19.16809264153016],
                  [-69.66893730922642, 19.163066089691352],
                  [-69.66636238857213, 19.15544489621829],
                  [-69.65795098110142, 19.15576920949813],
                  [-69.65966759487095, 19.170200504749083]]]),
            {
              "clase": 2,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.70594651301523, 19.10022592713311],
                  [-69.70517403681895, 19.085058502732387],
                  [-69.68929535945078, 19.092277396756963],
                  [-69.68054062922617, 19.097224996237227],
                  [-69.68285805781504, 19.103145699548094],
                  [-69.69805008967539, 19.102415761275164]]]),
            {
              "clase": 2,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.54736459400243, 19.308792365237114],
                  [-69.5500253453452, 19.303203081275655],
                  [-69.54152810718602, 19.30142095058104],
                  [-69.53646409656591, 19.304418159254123],
                  [-69.53637826587743, 19.310331409888025],
                  [-69.54607713367528, 19.31089842268691]]]),
            {
              "clase": 2,
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.52273118640966, 19.32086132671981],
                  [-69.52419030811376, 19.31559645309029],
                  [-69.514148117562, 19.312194444558017],
                  [-69.51225984241552, 19.31802641583899],
                  [-69.51612222339696, 19.321833284844143]]]),
            {
              "clase": 2,
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.3034223901609, 19.29007278208785],
                  [-69.30359405153786, 19.280837153680622],
                  [-69.29384749590494, 19.279918974991496],
                  [-69.29110091387369, 19.292071077540108]]]),
            {
              "clase": 2,
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.20767348467447, 19.284941953391435],
                  [-69.20715850054361, 19.27343748493024],
                  [-69.19153731524088, 19.284941953391435]]]),
            {
              "clase": 2,
              "system:index": "7"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-69.16166823565104, 19.293529269232792],
                  [-69.1651014631901, 19.282511499209292],
                  [-69.16389983355143, 19.27262728064337],
                  [-69.15754836260416, 19.282997592931423],
                  [-69.15566008745768, 19.2949874479341]]]),
            {
              "clase": 2,
              "system:index": "8"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
////////////////////////////////////////////////////////////////////////////////
// Talleres de Capacitación Geoespacial de República Dominicana
// Taller: (T2) Introducción al Google Earth Engine
// Organizado por: SERVIR-Amazonia, INTEC
// Autora: Andréa Puzzi Nicolau (Spatial Informatics Group)
// Titulo: Colección de Imágenes
////////////////////////////////////////////////////////////////////////////////

//--------------------------------------------------------------
// Definir área de interés (datos vectoriales)
//--------------------------------------------------------------

// Vamos trabajar con la provincia de Samaná

var gaul = ee.FeatureCollection('FAO/GAUL/2015/level1');
var area = gaul.filter(ee.Filter.eq('ADM1_NAME', 'Samana'));
Map.centerObject(area, 7);
Map.addLayer(area, {}, 'Área de interés', false);

//--------------------------------------------------------------
// Definir dato raster
//--------------------------------------------------------------

// Trabajaremos con datos Landsat 8.
// Busque en la barra de búsqueda 'Landsat 8, level 2, collection 2, tier 1'.
// Colección 2 -> Nivel de procesamiento más avanzado.
// https://www.usgs.gov/landsat-missions/landsat-collection-2
// Level 2 -> Datos de reflectancia superficial.
// Tier 1 -> Datos de la más alta calidad.

var landsat8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2');

var coleccion = landsat8
    .filterDate('2020-01-01', '2022-01-01')
    .filterBounds(area)
    .filter(ee.Filter.lt('CLOUD_COVER', 10));

Map.addLayer(coleccion, {bands: ['SR_B4', 'SR_B3', 'SR_B2'], min: 7000, max: 12000}, 'Coleccion Landsat 8');

print(coleccion);

//--------------------------------------------------------------
// Preprocesamiento de series temporales
// (Escalonamiento y Enmascaramiento de nubes)
//--------------------------------------------------------------

// Preprocesamiento de series de tiempo usando funciones que se aplican
// a todas y cada una de las imágenes de la colección.

// Función para aplicar factores de escala.
// Para obtener valores de reflectancia superficial entre 0 y 1
// (fracción de la radiación solar de entrada), necesitamos usar
// factores de escala proporcionados por NASA/USGS.
function escalonamiento(imagen) {
  var bandasOpticas = imagen.select('SR_B.').multiply(0.0000275).add(-0.2);
  var bandasTermicas = imagen.select('ST_B.*').multiply(0.00341802).add(149.0);
  return imagen.addBands(bandasOpticas, null, true)
               .addBands(bandasTermicas, null, true);
}

// Función de enmascaramiento de nubes.
// La banda de calidad 'QA_PIXEL' proporciona información sobre la aparición de nubes
// y otros aspectos de calidad de imagen.
// La información se almacena en bits y usamos la función 'bitWiseAnd'
// para extraerlo.
// La banda de calidad 'QA_RADSAT' proporciona información de calidad sobre
// saturación radiométrica.
function mascaraNubesL8(image) {
    // Bit 0 - Llenar
    // Bit 1 - Nubes dilatadas
    // Bit 2 - Cirrus
    // Bit 3 - Nubes
    // Bit 4 - Sombra de la nubes
    var mascaraQA = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111',
        2)).eq(0);
    var mascaraSat = image.select('QA_RADSAT').eq(0);

    return image.updateMask(mascaraQA)
                .updateMask(mascaraSat);
}
// Porque estamos tratando con bits, en la función mascaraNubesL8
// utilizamos las funciones bitwiseAnd y parseInt.
// Estas son funciones que sirven para desempaquetar
// la información de bits. Un bitwise AND es una operación binaria
// que toma dos representaciones binarias de igual longitud y
// realiza la operación AND lógica en cada par de
// bits correspondientes. Por lo tanto, si ambos bits en el comparador
// las posiciones tienen el valor 1, el bit en el resultado
// la representación binaria es 1 (1 × 1 = 1); de lo contrario,
// el resultado es 0 (1 × 0 = 0 y 0 × 0 = 0). El parseInt
// la función analiza un argumento de cadena (en nuestro caso, de cinco caracteres
// cadena '11111') y devuelve un entero del especificado
// sistema de numeración, base 2.

// Función para calcular indices.
// NDVI: (NIR-Rojo)/(NIR+Rojo)
// LSWI: (NIR-SWIR1)/(NIR+SWIR1)
// NDMI: (SWIR2-Rojo)/(SWIR2+Rojo)
// MNDWI: (Verde-SWIR2)/(Verde+SWIR2)
// Utilizamos la función GEE normalizedDifference, expresada como (b1-b2)/(b1+b2).
function calcularIndices(img){
  var ndvi = img.normalizedDifference(['SR_B5', 'SR_B4']).rename('ndvi');
  var lswi = img.normalizedDifference(['SR_B5', 'SR_B6']).rename('lswi');
  var ndmi = img.normalizedDifference(['SR_B7', 'SR_B4']).rename('ndmi');
  var mndwi = img.normalizedDifference(['SR_B3', 'SR_B7']).rename('mndwi');
  var indices = img.addBands(ndvi).addBands(lswi).addBands(ndmi).addBands(mndwi);
  return indices;
}

// Aplicar funciones a las imágenes en la colección.
var preProcesado = coleccion.map(escalonamiento)
                            .map(mascaraNubesL8)
                            .map(calcularIndices);


///---------------------------------------------------------------
// Visualizar las primeras imágenes no procesadas y preprocesadas
//---------------------------------------------------------------

// Seleccionar la primera imagen no procesada.
var primeraNoProcesada = coleccion.first();

// Definir parametros de visualización.
var paramVisNoProcesada = {
  bands: ['SR_B4', 'SR_B3', 'SR_B2'],
  min: 4380,
  max: 22300
};

// Agregar imagen al mapa.
Map.addLayer(primeraNoProcesada, 
             paramVisNoProcesada, 
             'Primera Imagen No Procesada');


// Seleccionar la primera imagen preprocesada.
var primeraPreProcesada = preProcesado.first();

var paramVisPreProcesada = {
  bands: ['SR_B4', 'SR_B3', 'SR_B2'],
  min: 0,
  max: 0.15
};


// Agregar imagen al mapa.
Map.addLayer(primeraPreProcesada, 
             paramVisPreProcesada, 
             'Primera Imagen Preprocesada');

//--------------------------------------------------------------
// Crear una composición
//--------------------------------------------------------------
// Utilice las siguientes funciones para comparar diferentes agregaciones:
// .min(); .max(); .mean(); .median()

// Trabajaremos con el compuesto Median.
var composicion = preProcesado.median().clip(area);

// Agregar composición al mapa.
Map.addLayer(composicion, paramVisPreProcesada, 'Composición Preprocesada');


//--------------------------------------------------------------
// Exportar composición como un Asset
//--------------------------------------------------------------

// Exportar como un GEE Asset.
Export.image.toAsset({
  image: composicion,
  description: 'samanaMedianaL8_2020-2021',
  assetId: 'projects/caribbean-trainings/assets/dominican-republic-2022/images/samanaMedianaL8_2020-2021', //! ACTUALIZAR A RUTA PROPIA
  region: area,
  scale: 30,
  maxPixels: 1e13
});

//--------------------------------------------------------------
// Datos de entrenamiento
//--------------------------------------------------------------

// Colectar polígonos de referencia para las clases abajo utilizando
// las herramientas de geometría.
// 1- Manglar
// 2- No manglar

// Combinar los poligonos en una Collección de Features unica.
var poligonosColetados = manglar.merge(noManglar);
print('Polígonos Coletados', poligonosColetados);

// Extrair puntos con informacion espectral en cada pixel en las áreas de los polígonos.
var pts = composicion
    .sampleRegions({
      collection: poligonosColetados, 
      properties: ['clase'], 
      scale: 30,
      geometries:true
    }).randomColumn() // crear una columna aleatoria de valores 0-1.
      .sort('random') // barajar los puntos utilizando la función ordenar.
      .limit(5000); // seleccionar los 5,000 primeros puntos.

print('Number of points', pts.size());
print('Puntos', pts.limit(10))

// Visualizar gráficos espectrales.
var graficoManglar = ui.Chart.image.regions({
    image: composicion,
    regions: pts.filter(ee.Filter.eq('clase', '1')),
    scale: 30
}).setOptions({
  title: 'Gráfico Manglar'
});
print(graficoManglar);

var graficoNoManglar = ui.Chart.image.regions({
    image: composicion,
    regions: pts.filter(ee.Filter.eq('clase', '2')),
    scale: 30
}).setOptions({
  title: 'Gráfico No Manglar'
});
print(graficoNoManglar);

